-- Forward engineer the friendships_schema from the previous chapter

-- Query: Create 6 new users
SELECT * FROM users;
INSERT INTO users (first_name, last_name)
VALUE ("Naruto", "Uzumaki"), ("Sasuke", "Uchiha"), ("Sakura", "Haruno"), ("Hinata", "Hyuga"), ("Rock", "Lee"), ("Kakashi", "Hatake");

-- Query: Have user 1 be friends with user 2, 4 and 6
SELECT * FROM friendships;
INSERT INTO friendships (user_id, friend_id)
VALUE (1,2), (1,4), (1,6);

SELECT users.first_name, users2.first_name AS friend -- showing the Have user 1 be friends with user 2, 4 and 6
FROM users
LEFT JOIN friendships ON users.id = friendships.user_id
LEFT JOIN users AS users2 ON users2.id = friendships.friend_id
WHERE users.id = 1
ORDER BY friend_id ASC;

-- Query: Have user 2 be friends with user 1, 3 and 5
INSERT INTO friendships (user_id, friend_id)
VALUE (2, 1), (2, 3), (2, 5);

SELECT users.first_name, users2.first_name AS friend -- showing the friends of user 2
FROM users
LEFT JOIN friendships ON users.id = friendships.user_id
LEFT JOIN users AS users2 ON users2.id = friendships.friend_id
WHERE users.id = 2
ORDER BY friend_id ASC;

-- Query: Have user 3 be friends with user 2 and 5
INSERT INTO friendships (user_id, friend_id)
VALUE (3,2), (3,5);

SELECT users.first_name, users2.first_name AS friend -- showing the friends of user 3
FROM users
LEFT JOIN friendships ON users.id = friendships.user_id
LEFT JOIN users AS users2 ON users2.id = friendships.friend_id
WHERE users.id = 3
ORDER BY friend_id ASC;

-- Query: Have user 4 be friends with user 3
INSERT INTO friendships (user_id, friend_id)
VALUE (4,3);

SELECT users.first_name, users2.first_name AS friend -- showing the friends of user 4
FROM users
LEFT JOIN friendships ON users.id = friendships.user_id
LEFT JOIN users AS users2 ON users2.id = friendships.friend_id
WHERE users.id = 4
ORDER BY friend_id ASC;

-- Query: Have user 5 be friends with user 1 and 6
INSERT INTO friendships (user_id, friend_id)
VALUE (5,1), (5,6);

SELECT users.first_name, users2.first_name AS friend -- showing the friends of user 5
FROM users
LEFT JOIN friendships ON users.id = friendships.user_id
LEFT JOIN users AS users2 ON users2.id = friendships.friend_id
WHERE users.id = 5
ORDER BY friend_id ASC;

-- Query: Have user 6 be friends with user 2 and 3
INSERT INTO friendships (user_id, friend_id)
VALUE (6,2), (6,3);

SELECT users.first_name, users2.first_name AS friend -- showing the friends of user 5
FROM users
LEFT JOIN friendships ON users.id = friendships.user_id
LEFT JOIN users AS users2 ON users2.id = friendships.friend_id
WHERE users.id = 6
ORDER BY friend_id ASC;

-- Query: Display the relationships created as shown in the table in the above image
SELECT users.first_name AS first_name, users.last_name AS last_name, users2.first_name AS friend_first_name, users2.last_name AS friend_last_name
FROM users
LEFT JOIN friendships ON users.id = friendships.user_id
LEFT JOIN users AS users2 ON users2.id = friendships.friend_id;





